# Generated by Django 5.2.4 on 2025-08-09 04:07

import chat.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='GIFTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('is_featured', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Sticker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=chat.models.sticker_upload_path)),
                ('format', models.CharField(choices=[('WEBP', 'WebP'), ('PNG', 'PNG'), ('JPG', 'JPG'), ('TGS', 'Telegram Animated Sticker'), ('WEBM', 'WebM Video')], default='WEBP', max_length=4)),
                ('emoji', models.CharField(blank=True, max_length=10)),
                ('width', models.PositiveSmallIntegerField(default=512)),
                ('height', models.PositiveSmallIntegerField(default=512)),
                ('frame_rate', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('usage_count', models.PositiveBigIntegerField(default=0)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('keywords', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['pack', 'id'],
            },
        ),
        migrations.CreateModel(
            name='StickerTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_featured', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('username', models.SlugField(blank=True, max_length=32, null=True, unique=True)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('PV', 'Private Chat'), ('GP', 'Group'), ('CH', 'Channel'), ('BC', 'Broadcast')], max_length=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='chat_avatars/')),
                ('is_public', models.BooleanField(default=False)),
                ('invite_link', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('join_by_request', models.BooleanField(default=False)),
                ('gif_search_enabled', models.BooleanField(default=True)),
                ('member_count', models.PositiveIntegerField(default=1)),
                ('message_count', models.PositiveBigIntegerField(default=0)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_chats', to='user.customuser')),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='GIF',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100)),
                ('identifier', models.CharField(blank=True, max_length=50)),
                ('source', models.CharField(choices=[('UP', 'User Uploaded'), ('TG', 'Telegram GIFs'), ('GP', 'GIPHY'), ('TR', 'Tenor')], default='UP', max_length=2)),
                ('file', models.FileField(upload_to=chat.models.gif_upload_path)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='gif_thumbnails/')),
                ('width', models.PositiveSmallIntegerField(default=480)),
                ('height', models.PositiveSmallIntegerField(default=270)),
                ('duration', models.FloatField(default=0.0)),
                ('frame_rate', models.PositiveSmallIntegerField(default=30)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('usage_count', models.PositiveBigIntegerField(default=0)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('source_url', models.URLField(blank=True)),
                ('attribution', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tags', models.ManyToManyField(blank=True, related_name='gifs', to='chat.giftag')),
            ],
        ),
        migrations.CreateModel(
            name='GIFUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage_date', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gif_usages', to='chat.chatroom')),
                ('gif', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_stats', to='chat.gif')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gif_usages', to='user.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('photo', 'Photo'), ('video', 'Video'), ('audio', 'Audio'), ('voice', 'Voice Message'), ('document', 'Document'), ('sticker', 'Sticker'), ('gif', 'GIF'), ('poll', 'Poll'), ('contact', 'Contact'), ('location', 'Location'), ('game', 'Game'), ('invoice', 'Invoice'), ('dice', 'Dice')], default='text', max_length=10)),
                ('text', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(4096)])),
                ('caption', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(1024)])),
                ('entities', models.JSONField(default=list)),
                ('media_file', models.FileField(blank=True, null=True, upload_to='chat_media/')),
                ('media_thumbnail', models.ImageField(blank=True, null=True, upload_to='chat_thumbnails/')),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_edited', models.BooleanField(default=False)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('forwards', models.PositiveIntegerField(default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('scheduled_date', models.DateTimeField(blank=True, null=True)),
                ('has_spoiler', models.BooleanField(default=False)),
                ('is_silent', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('delete_date', models.DateTimeField(blank=True, null=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.chatroom')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_messages', to='user.customuser')),
                ('forward_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forwarded_messages', to='chat.message')),
                ('gif', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chat.gif')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='chat.message')),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', to='user.customuser')),
                ('sender_chat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='channel_messages', to='chat.chatroom')),
                ('via_bot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bot_messages', to='user.customuser')),
                ('sticker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chat.sticker')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='MessageView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_date', models.DateTimeField(auto_now_add=True)),
                ('device', models.CharField(blank=True, max_length=100)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_views', to='chat.message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viewed_messages', to='user.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('OW', 'Owner'), ('AD', 'Admin'), ('MO', 'Moderator'), ('ME', 'Member'), ('RE', 'Restricted'), ('BA', 'Banned')], default='ME', max_length=2)),
                ('joined_date', models.DateTimeField(auto_now_add=True)),
                ('until_date', models.DateTimeField(blank=True, null=True)),
                ('permissions', models.JSONField(default=list)),
                ('is_muted', models.BooleanField(default=False)),
                ('can_send_messages', models.BooleanField(default=True)),
                ('can_send_media', models.BooleanField(default=True)),
                ('can_send_polls', models.BooleanField(default=True)),
                ('can_send_stickers', models.BooleanField(default=True)),
                ('can_send_gifs', models.BooleanField(default=True)),
                ('custom_title', models.CharField(blank=True, max_length=16)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='chat.chatroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='user.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='MessageReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('emoji', 'Emoji'), ('sticker', 'Custom Emoji (Sticker)')], max_length=10)),
                ('emoji', models.CharField(blank=True, max_length=10, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='chat.message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='user.customuser')),
                ('sticker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='chat.sticker')),
            ],
        ),
        migrations.CreateModel(
            name='StickerPack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('identifier', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pack_type', models.CharField(choices=[('ST', 'Static Sticker'), ('AN', 'Animated Sticker'), ('VI', 'Video Sticker'), ('EM', 'Emoji Pack')], default='ST', max_length=2)),
                ('is_animated', models.BooleanField(default=False)),
                ('is_video', models.BooleanField(default=False)),
                ('is_emoji', models.BooleanField(default=False)),
                ('tgs_support', models.BooleanField(default=False)),
                ('is_official', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('premium', models.BooleanField(default=False)),
                ('usage_count', models.PositiveBigIntegerField(default=0)),
                ('downloads', models.PositiveBigIntegerField(default=0)),
                ('rating', models.FloatField(default=0.0)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='sticker_pack_thumbnails/')),
                ('cover_sticker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cover_for_packs', to='chat.sticker')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_sticker_packs', to='user.customuser')),
                ('tags', models.ManyToManyField(blank=True, related_name='sticker_packs', to='chat.stickertag')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='sticker',
            name='pack',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stickers', to='chat.stickerpack'),
        ),
        migrations.AddField(
            model_name='chatroom',
            name='sticker_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chat.stickerpack'),
        ),
        migrations.CreateModel(
            name='StickerSearchLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=100)),
                ('results_count', models.PositiveIntegerField()),
                ('search_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sticker_searches', to='user.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='StickerUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage_date', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sticker_usages', to='chat.chatroom')),
                ('sticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_stats', to='chat.sticker')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sticker_usages', to='user.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='UserGIFCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_date', models.DateTimeField(auto_now_add=True)),
                ('is_favorite', models.BooleanField(default=False)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('gif', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_collections', to='chat.gif')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gif_collections', to='user.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='UserStickerCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_date', models.DateTimeField(auto_now_add=True)),
                ('is_favorite', models.BooleanField(default=False)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('pack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_collections', to='chat.stickerpack')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sticker_collections', to='user.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='GIFSearchLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=100)),
                ('results_count', models.PositiveIntegerField()),
                ('search_date', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(blank=True, max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gif_searches', to='user.customuser')),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'search_date'], name='chat_gifsea_user_id_04cd31_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='gif',
            index=models.Index(fields=['title'], name='chat_gif_title_e24dd1_idx'),
        ),
        migrations.AddIndex(
            model_name='gif',
            index=models.Index(fields=['usage_count'], name='chat_gif_usage_c_d5e044_idx'),
        ),
        migrations.AddIndex(
            model_name='gif',
            index=models.Index(fields=['source'], name='chat_gif_source_282718_idx'),
        ),
        migrations.AddIndex(
            model_name='gifusage',
            index=models.Index(fields=['gif'], name='chat_gifusa_gif_id_432bf8_idx'),
        ),
        migrations.AddIndex(
            model_name='gifusage',
            index=models.Index(fields=['user'], name='chat_gifusa_user_id_ad50c0_idx'),
        ),
        migrations.AddIndex(
            model_name='gifusage',
            index=models.Index(fields=['chat'], name='chat_gifusa_chat_id_8090b8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='messageview',
            unique_together={('message', 'user')},
        ),
        migrations.AddIndex(
            model_name='participant',
            index=models.Index(fields=['user', 'chat'], name='chat_partic_user_id_a76ea3_idx'),
        ),
        migrations.AddIndex(
            model_name='participant',
            index=models.Index(fields=['chat', 'role'], name='chat_partic_chat_id_fb583d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together={('user', 'chat')},
        ),
        migrations.AddIndex(
            model_name='messagereaction',
            index=models.Index(fields=['message', 'user'], name='chat_messag_message_511fb7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='messagereaction',
            unique_together={('message', 'user', 'emoji', 'sticker')},
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['chat', 'date'], name='chat_messag_chat_id_988040_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sender', 'date'], name='chat_messag_sender__46a6c2_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['parent'], name='chat_messag_parent__ede592_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['is_pinned'], name='chat_messag_is_pinn_1dff28_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sticker'], name='chat_messag_sticker_43317d_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['gif'], name='chat_messag_gif_id_65eace_idx'),
        ),
        migrations.AddIndex(
            model_name='sticker',
            index=models.Index(fields=['emoji'], name='chat_sticke_emoji_73bf88_idx'),
        ),
        migrations.AddIndex(
            model_name='sticker',
            index=models.Index(fields=['usage_count'], name='chat_sticke_usage_c_171ec8_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['type'], name='chat_chatro_type_89ef25_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['username'], name='chat_chatro_usernam_0fa3f0_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['invite_link'], name='chat_chatro_invite__f26edf_idx'),
        ),
        migrations.AddIndex(
            model_name='stickersearchlog',
            index=models.Index(fields=['user', 'search_date'], name='chat_sticke_user_id_2b6262_idx'),
        ),
        migrations.AddIndex(
            model_name='stickerpack',
            index=models.Index(fields=['identifier'], name='chat_sticke_identif_f259d9_idx'),
        ),
        migrations.AddIndex(
            model_name='stickerpack',
            index=models.Index(fields=['is_public'], name='chat_sticke_is_publ_c9cc13_idx'),
        ),
        migrations.AddIndex(
            model_name='stickerpack',
            index=models.Index(fields=['creator'], name='chat_sticke_creator_0cdf3b_idx'),
        ),
        migrations.AddIndex(
            model_name='stickerusage',
            index=models.Index(fields=['sticker'], name='chat_sticke_sticker_6e24ef_idx'),
        ),
        migrations.AddIndex(
            model_name='stickerusage',
            index=models.Index(fields=['user'], name='chat_sticke_user_id_dabc24_idx'),
        ),
        migrations.AddIndex(
            model_name='stickerusage',
            index=models.Index(fields=['chat'], name='chat_sticke_chat_id_1e85ab_idx'),
        ),
        migrations.AddIndex(
            model_name='usergifcollection',
            index=models.Index(fields=['user', 'is_favorite'], name='chat_usergi_user_id_403bf4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usergifcollection',
            unique_together={('user', 'gif')},
        ),
        migrations.AddIndex(
            model_name='userstickercollection',
            index=models.Index(fields=['user', 'is_favorite'], name='chat_userst_user_id_b5b1e8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userstickercollection',
            unique_together={('user', 'pack')},
        ),
    ]
